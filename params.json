{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"UA-905793-3","name":"Di","body":"*Di*\r\n================================\r\n\r\n***Di*** is the lightweight and powerful dependency injection framework written in and for PHP. ***Di*** supports all currently known and required types of injections (constructor, setter, property).\r\n***Di*** is fully documented and really easy to use. ***Di*** is also under active development and of course it's unit-tested.\r\n\r\n\r\n\r\nFeatures\r\n-------------------------\r\n* static-, dynamic-, annotation-based- and typehint-based- dependency maps\r\n * ***Di*** is cappable of parsing dependencies out of \"annotations\" or just \"typehints\", can import dependencies from static JSON-based (filesystem) dependency maps and can handle at runtime defined dependencies (fluent interface).\r\n\r\n* automagic wiring\r\n  * ***Di*** can automatically look in the global scope for an existing instance of the defined class and use this if found for wiring\r\n\r\n* clear project-structure and clean code\r\n  * So it is really easy for you to get an detailed overview of what's going on in ***Di***.\r\n\r\n* no external dependencies\r\n  * ***Di*** does not need any special PHP-extension\r\n\r\n* Fully documented\r\n  * Every part in ***Di*** is covered by a comment and/or a detailed howto\r\n\r\n* Unit-Tested\r\n  * ***Di*** ist well tested and used in production environment\r\n\r\n* easy to use\r\n  * ***Di*** provides a very good API for developers\r\n\r\n\r\n\r\nRequirements\r\n-------------------------\r\n***Di*** requires at least PHP 5.3 and has no external dependencies. ***Di*** currently uses the PHP Reflection API to analyze classes. One of the planned features is using a regular expression based parser as replacement for the slow Reflection-API (for more details view **Roadmap**).\r\n\r\n\r\n\r\nHow dependency injection works\r\n-------------------------\r\nThe dependency injection process is separated into three main parts. These parts cover the process from defining dependencies of a class to creating instances of a class having dependencies.\r\n\r\n1. **Creating the dependency map**\r\n\r\n ***Di*** needs to know a lot of information when creating instances via *build()*. The information is stored in a map - the so called *dependency map*.\r\n\r\n* **Connect Instances to the dependency map**\r\n\r\n This step is also known as *wiring* and it describes the creation of a relation between an instance of a class and the *dependency map* created in the previous step.\r\n\r\n* **Building instances through the container**\r\n\r\n Instead of creating instances like you did it before (e.g.) *$Foo = new foo($dependency);* you must now use the ***Di***-*container* to create instances. This is done by simply calling the build() method of your ***Di***-*container* instance. See **box 1** for an example call:\r\n\r\n**box 1**\r\n\r\n    $Foo = $container->build('Foo');\r\n\r\n\r\n\r\nUsage\r\n-------------------------\r\n***Di*** can be used in four mainly different ways:\r\n\r\n1. The *1st* way is using ***Di*** in combination with *static* dependency maps. This feature is required by systems (like frameworks) which for example generate the map automatically or retrieve dependencies from external sources.\r\n\r\n* The *2nd* and recommended way is using ***Di*** with *dynamic* build dependency maps. These maps can be build through a *fluent interface*. This is the easiest way for small projects and as a sideeffect: it produces good readable code (as recommended by Martin Fowler). See the **box 2** for an example call:\r\n\r\n3. The 3rd way is using ***Di*** with *dynamic* build annotation based dependency maps. You only need to define the dependencies of a class in the PHPDoc class comment and make use of the *Di_Map_Annotation*  parser to retrieve a map ...\r\n\r\n4. The 4th way is using Di with Typehint based dependency maps. You only need to define the correct typehints within your classes and the Di_Map_Typehint parser does all the work for you.\r\n\r\n**box 2**\r\n\r\n    $Foo = $map\r\n        ->classname('Foo')\r\n        ->dependsOn('Database')\r\n        ->id('Database1')\r\n        ->instance($Database1)\r\n        ->configuration(array('type' => Di_Dependency::TYPE_CONSTRUCTOR, 'position' => 1))\r\n                   ->build(array('custom argument passed to Foo()'));\r\n\r\n\r\n\r\nDemonstration\r\n-------------------------\r\nYou will find detailed demonstrations (and the corresponding sourcecode) in the folder ***./_demo/***. This should give you a good overview of what is possible with ***Di*** and what is (currently) not. The demonstrations cover the following topics:\r\n\r\n* How to inject dependencies using a ...\r\n * static dependency map (JSON format) and manually wiring\r\n * static dependency map (JSON format) and automagic wiring\r\n * static dependency map (JSON format) and a class with singleton pattern\r\n * static dependency map (JSON format) and using frozen objects so we don't need to wire\r\n * static dependency map (JSON format) Export an existing Di_Collection (from any Di_Map instance) to a static map and freeze instances\r\n * dynamic dependency map (fluent Interface) and manually wiring\r\n * dynamic dependency map (fluent Interface) and automagic wiring\r\n * dynamic dependency map (fluent Interface) and a class with singleton pattern\r\n * dynamic dependency map (fluent Interface), automagic wiring and export to static dependency map (JSON format)\r\n * annotation dependency map (annotations inline) and manually wiring\r\n * annotation dependency map (annotations inline) and automagic wiring\r\n * annotation dependency map (annotations inline) and a class with singleton pattern\r\n * typehint dependency map (plain vanilla PHP) and manually wiring\r\n * typehint dependency map (plain vanilla PHP) and automagic wiring\r\n * typehint dependency map (plain vanilla PHP) and a class with singleton pattern\r\n\r\n\r\n   \r\nAPI Documentation\r\n-------------------------\r\nThe sourcecode is fully documented and you will find the documentation in the folder ***./_doc/html/***.\r\n\r\n\r\nRoadmap\r\n-------------------------\r\nThis is the current roadmap of new features:\r\n\r\n* Replace ReflectionClass/Method calls with custom regular expression based parser/analyzer\r\n\r\n* Increasing code-coverage of the Unit-Tests from approximately 79% up to ~100% ;)\r\n\r\n\r\n-------------------------\r\n\r\nBenjamin Carl | PHPFl√ºsterer\r\nSoftware-Architect\r\n\r\nVisit my Blog for the latest news - www.phpfluesterer.de\r\n","tagline":"The lightweight and powerful dependency injection framework for PHP"}